{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport { useLayoutEffect } from 'react';\n/**\n * returns the merged type of a step or the default type.\n */\nvar useMergedType = function useMergedType(_ref) {\n  var defaultType = _ref.defaultType,\n    _ref$steps = _ref.steps,\n    steps = _ref$steps === void 0 ? [] : _ref$steps,\n    current = _ref.current,\n    defaultCurrent = _ref.defaultCurrent;\n  var _a;\n  var _useMergedState = useMergedState(defaultCurrent, {\n      value: current\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    innerCurrent = _useMergedState2[0],\n    updateInnerCurrent = _useMergedState2[1];\n  useLayoutEffect(function () {\n    if (current === undefined) return;\n    updateInnerCurrent(current);\n  }, [current]);\n  var innerType = typeof innerCurrent === 'number' ? (_a = steps[innerCurrent]) === null || _a === void 0 ? void 0 : _a.type : defaultType;\n  var currentMergedType = innerType !== null && innerType !== void 0 ? innerType : defaultType;\n  return {\n    currentMergedType: currentMergedType,\n    updateInnerCurrent: updateInnerCurrent\n  };\n};\nexport default useMergedType;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}