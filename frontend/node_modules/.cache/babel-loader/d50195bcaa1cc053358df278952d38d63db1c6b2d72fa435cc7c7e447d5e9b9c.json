{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { genFocusStyle, resetComponent } from '../../style';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nvar genBreadcrumbStyle = function genBreadcrumbStyle(token) {\n  var _$concat2, _Object$assign;\n  var componentCls = token.componentCls,\n    iconCls = token.iconCls;\n  return _defineProperty({}, componentCls, Object.assign(Object.assign({}, resetComponent(token)), (_Object$assign = {\n    color: token.itemColor,\n    fontSize: token.fontSize\n  }, _defineProperty(_Object$assign, iconCls, {\n    fontSize: token.iconFontSize\n  }), _defineProperty(_Object$assign, \"ol\", {\n    display: 'flex',\n    flexWrap: 'wrap',\n    margin: 0,\n    padding: 0,\n    listStyle: 'none'\n  }), _defineProperty(_Object$assign, \"a\", Object.assign({\n    color: token.linkColor,\n    transition: \"color \".concat(token.motionDurationMid),\n    padding: \"0 \".concat(token.paddingXXS, \"px\"),\n    borderRadius: token.borderRadiusSM,\n    height: token.lineHeight * token.fontSize,\n    display: 'inline-block',\n    marginInline: -token.marginXXS,\n    '&:hover': {\n      color: token.linkHoverColor,\n      backgroundColor: token.colorBgTextHover\n    }\n  }, genFocusStyle(token))), _defineProperty(_Object$assign, \"li:last-child\", {\n    color: token.lastItemColor\n  }), _defineProperty(_Object$assign, \"\".concat(componentCls, \"-separator\"), {\n    marginInline: token.separatorMargin,\n    color: token.separatorColor\n  }), _defineProperty(_Object$assign, \"\".concat(componentCls, \"-link\"), _defineProperty({}, \"\\n          > \".concat(iconCls, \" + span,\\n          > \").concat(iconCls, \" + a\\n        \"), {\n    marginInlineStart: token.marginXXS\n  })), _defineProperty(_Object$assign, \"\".concat(componentCls, \"-overlay-link\"), (_$concat2 = {\n    borderRadius: token.borderRadiusSM,\n    height: token.lineHeight * token.fontSize,\n    display: 'inline-block',\n    padding: \"0 \".concat(token.paddingXXS, \"px\"),\n    marginInline: -token.marginXXS\n  }, _defineProperty(_$concat2, \"> \".concat(iconCls), {\n    marginInlineStart: token.marginXXS,\n    fontSize: token.fontSizeIcon\n  }), _defineProperty(_$concat2, '&:hover', {\n    color: token.linkHoverColor,\n    backgroundColor: token.colorBgTextHover,\n    a: {\n      color: token.linkHoverColor\n    }\n  }), _defineProperty(_$concat2, \"a\", {\n    '&:hover': {\n      backgroundColor: 'transparent'\n    }\n  }), _$concat2)), _defineProperty(_Object$assign, \"&\".concat(token.componentCls, \"-rtl\"), {\n    direction: 'rtl'\n  }), _Object$assign)));\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Breadcrumb', function (token) {\n  var BreadcrumbToken = mergeToken(token, {});\n  return [genBreadcrumbStyle(BreadcrumbToken)];\n}, function (token) {\n  return {\n    itemColor: token.colorTextDescription,\n    lastItemColor: token.colorText,\n    iconFontSize: token.fontSize,\n    linkColor: token.colorTextDescription,\n    linkHoverColor: token.colorText,\n    separatorColor: token.colorTextDescription,\n    separatorMargin: token.marginXS\n  };\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}