{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React from 'react';\nimport Divider from '../divider';\nimport PanelPicker from './components/PanelPicker';\nimport PanelPresets from './components/PanelPresets';\nimport { PanelPickerProvider, PanelPresetsProvider } from './context';\nvar ColorPickerPanel = function ColorPickerPanel(props) {\n  var prefixCls = props.prefixCls,\n    presets = props.presets,\n    panelRender = props.panelRender,\n    color = props.color,\n    onChange = props.onChange,\n    onClear = props.onClear,\n    injectProps = __rest(props, [\"prefixCls\", \"presets\", \"panelRender\", \"color\", \"onChange\", \"onClear\"]);\n  var colorPickerPanelPrefixCls = \"\".concat(prefixCls, \"-inner-content\");\n  // ==== Inject props ===\n  var panelPickerProps = Object.assign({\n    prefixCls: prefixCls,\n    value: color,\n    onChange: onChange,\n    onClear: onClear\n  }, injectProps);\n  var panelPresetsProps = React.useMemo(function () {\n    return {\n      prefixCls: prefixCls,\n      value: color,\n      presets: presets,\n      onChange: onChange\n    };\n  }, [prefixCls, color, presets, onChange]);\n  // ====================== Render ======================\n  var innerPanel = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PanelPicker, null), Array.isArray(presets) && /*#__PURE__*/React.createElement(Divider, {\n    className: \"\".concat(colorPickerPanelPrefixCls, \"-divider\")\n  }), /*#__PURE__*/React.createElement(PanelPresets, null));\n  return /*#__PURE__*/React.createElement(PanelPickerProvider, {\n    value: panelPickerProps\n  }, /*#__PURE__*/React.createElement(PanelPresetsProvider, {\n    value: panelPresetsProps\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: colorPickerPanelPrefixCls\n  }, typeof panelRender === 'function' ? panelRender(innerPanel, {\n    components: {\n      Picker: PanelPicker,\n      Presets: PanelPresets\n    }\n  }) : innerPanel)));\n};\nif (process.env.NODE_ENV !== 'production') {\n  ColorPickerPanel.displayName = 'ColorPickerPanel';\n}\nexport default ColorPickerPanel;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}