{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport React from 'react';\nimport { useToken } from '../theme/internal';\nexport var responsiveArray = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nvar getResponsiveMap = function getResponsiveMap(token) {\n  return {\n    xs: \"(max-width: \".concat(token.screenXSMax, \"px)\"),\n    sm: \"(min-width: \".concat(token.screenSM, \"px)\"),\n    md: \"(min-width: \".concat(token.screenMD, \"px)\"),\n    lg: \"(min-width: \".concat(token.screenLG, \"px)\"),\n    xl: \"(min-width: \".concat(token.screenXL, \"px)\"),\n    xxl: \"(min-width: \".concat(token.screenXXL, \"px)\")\n  };\n};\n/**\n * Ensures that the breakpoints token are valid, in good order\n * For each breakpoint : screenMin <= screen <= screenMax and screenMax <= nextScreenMin\n */\nvar validateBreakpoints = function validateBreakpoints(token) {\n  var indexableToken = token;\n  var revBreakpoints = [].concat(responsiveArray).reverse();\n  revBreakpoints.forEach(function (breakpoint, i) {\n    var breakpointUpper = breakpoint.toUpperCase();\n    var screenMin = \"screen\".concat(breakpointUpper, \"Min\");\n    var screen = \"screen\".concat(breakpointUpper);\n    if (!(indexableToken[screenMin] <= indexableToken[screen])) {\n      throw new Error(\"\".concat(screenMin, \"<=\").concat(screen, \" fails : !(\").concat(indexableToken[screenMin], \"<=\").concat(indexableToken[screen], \")\"));\n    }\n    if (i < revBreakpoints.length - 1) {\n      var screenMax = \"screen\".concat(breakpointUpper, \"Max\");\n      if (!(indexableToken[screen] <= indexableToken[screenMax])) {\n        throw new Error(\"\".concat(screen, \"<=\").concat(screenMax, \" fails : !(\").concat(indexableToken[screen], \"<=\").concat(indexableToken[screenMax], \")\"));\n      }\n      var nextBreakpointUpperMin = revBreakpoints[i + 1].toUpperCase();\n      var nextScreenMin = \"screen\".concat(nextBreakpointUpperMin, \"Min\");\n      if (!(indexableToken[screenMax] <= indexableToken[nextScreenMin])) {\n        throw new Error(\"\".concat(screenMax, \"<=\").concat(nextScreenMin, \" fails : !(\").concat(indexableToken[screenMax], \"<=\").concat(indexableToken[nextScreenMin], \")\"));\n      }\n    }\n  });\n  return token;\n};\nexport default function useResponsiveObserver() {\n  var _useToken = useToken(),\n    _useToken2 = _slicedToArray(_useToken, 2),\n    token = _useToken2[1];\n  var responsiveMap = getResponsiveMap(validateBreakpoints(token));\n  // To avoid repeat create instance, we add `useMemo` here.\n  return React.useMemo(function () {\n    var subscribers = new Map();\n    var subUid = -1;\n    var screens = {};\n    return {\n      matchHandlers: {},\n      dispatch: function dispatch(pointMap) {\n        screens = pointMap;\n        subscribers.forEach(function (func) {\n          return func(screens);\n        });\n        return subscribers.size >= 1;\n      },\n      subscribe: function subscribe(func) {\n        if (!subscribers.size) this.register();\n        subUid += 1;\n        subscribers.set(subUid, func);\n        func(screens);\n        return subUid;\n      },\n      unsubscribe: function unsubscribe(paramToken) {\n        subscribers[\"delete\"](paramToken);\n        if (!subscribers.size) this.unregister();\n      },\n      unregister: function unregister() {\n        var _this = this;\n        Object.keys(responsiveMap).forEach(function (screen) {\n          var matchMediaQuery = responsiveMap[screen];\n          var handler = _this.matchHandlers[matchMediaQuery];\n          handler === null || handler === void 0 ? void 0 : handler.mql.removeListener(handler === null || handler === void 0 ? void 0 : handler.listener);\n        });\n        subscribers.clear();\n      },\n      register: function register() {\n        var _this2 = this;\n        Object.keys(responsiveMap).forEach(function (screen) {\n          var matchMediaQuery = responsiveMap[screen];\n          var listener = function listener(_ref) {\n            var matches = _ref.matches;\n            _this2.dispatch(Object.assign(Object.assign({}, screens), _defineProperty({}, screen, matches)));\n          };\n          var mql = window.matchMedia(matchMediaQuery);\n          mql.addListener(listener);\n          _this2.matchHandlers[matchMediaQuery] = {\n            mql: mql,\n            listener: listener\n          };\n          listener(mql);\n        });\n      },\n      responsiveMap: responsiveMap\n    };\n  }, [token]);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}