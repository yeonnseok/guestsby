{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport classNames from 'classnames';\nimport { PickerPanel as RCPickerPanel } from 'rc-picker';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport { useLocale } from '../locale';\nimport CalendarHeader from './Header';\nimport enUS from './locale/en_US';\nimport warning from '../_util/warning';\nimport useStyle from './style';\nfunction generateCalendar(generateConfig) {\n  function isSameYear(date1, date2) {\n    return date1 && date2 && generateConfig.getYear(date1) === generateConfig.getYear(date2);\n  }\n  function isSameMonth(date1, date2) {\n    return isSameYear(date1, date2) && generateConfig.getMonth(date1) === generateConfig.getMonth(date2);\n  }\n  function isSameDate(date1, date2) {\n    return isSameMonth(date1, date2) && generateConfig.getDate(date1) === generateConfig.getDate(date2);\n  }\n  var Calendar = function Calendar(props) {\n    var _classNames3;\n    var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      rootClassName = props.rootClassName,\n      style = props.style,\n      dateFullCellRender = props.dateFullCellRender,\n      dateCellRender = props.dateCellRender,\n      monthFullCellRender = props.monthFullCellRender,\n      monthCellRender = props.monthCellRender,\n      cellRender = props.cellRender,\n      fullCellRender = props.fullCellRender,\n      headerRender = props.headerRender,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      disabledDate = props.disabledDate,\n      mode = props.mode,\n      validRange = props.validRange,\n      _props$fullscreen = props.fullscreen,\n      fullscreen = _props$fullscreen === void 0 ? true : _props$fullscreen,\n      onChange = props.onChange,\n      onPanelChange = props.onPanelChange,\n      onSelect = props.onSelect;\n    var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction,\n      calendar = _React$useContext.calendar;\n    var prefixCls = getPrefixCls('picker', customizePrefixCls);\n    var calendarPrefixCls = \"\".concat(prefixCls, \"-calendar\");\n    var _useStyle = useStyle(prefixCls),\n      _useStyle2 = _slicedToArray(_useStyle, 2),\n      wrapSSR = _useStyle2[0],\n      hashId = _useStyle2[1];\n    var today = generateConfig.getNow();\n    // ====================== Warning =======================\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== \"production\" ? warning(!dateFullCellRender, 'Calendar', '`dateFullCellRender` is deprecated. Please use `fullCellRender` instead.') : void 0;\n      process.env.NODE_ENV !== \"production\" ? warning(!dateCellRender, 'Calendar', '`dateCellRender` is deprecated. Please use `cellRender` instead.') : void 0;\n      process.env.NODE_ENV !== \"production\" ? warning(!monthFullCellRender, 'Calendar', '`monthFullCellRender` is deprecated. Please use `fullCellRender` instead.') : void 0;\n      process.env.NODE_ENV !== \"production\" ? warning(!monthCellRender, 'Calendar', '`monthCellRender` is deprecated. Please use `cellRender` instead.') : void 0;\n    }\n    // ====================== State =======================\n    // Value\n    var _useMergedState = useMergedState(function () {\n        return value || generateConfig.getNow();\n      }, {\n        defaultValue: defaultValue,\n        value: value\n      }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedValue = _useMergedState2[0],\n      setMergedValue = _useMergedState2[1];\n    // Mode\n    var _useMergedState3 = useMergedState('month', {\n        value: mode\n      }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      mergedMode = _useMergedState4[0],\n      setMergedMode = _useMergedState4[1];\n    var panelMode = React.useMemo(function () {\n      return mergedMode === 'year' ? 'month' : 'date';\n    }, [mergedMode]);\n    // Disabled Date\n    var mergedDisabledDate = React.useCallback(function (date) {\n      var notInRange = validRange ? generateConfig.isAfter(validRange[0], date) || generateConfig.isAfter(date, validRange[1]) : false;\n      return notInRange || !!(disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(date));\n    }, [disabledDate, validRange]);\n    // ====================== Events ======================\n    var triggerPanelChange = function triggerPanelChange(date, newMode) {\n      onPanelChange === null || onPanelChange === void 0 ? void 0 : onPanelChange(date, newMode);\n    };\n    var triggerChange = function triggerChange(date) {\n      setMergedValue(date);\n      if (!isSameDate(date, mergedValue)) {\n        // Trigger when month panel switch month\n        if (panelMode === 'date' && !isSameMonth(date, mergedValue) || panelMode === 'month' && !isSameYear(date, mergedValue)) {\n          triggerPanelChange(date, mergedMode);\n        }\n        onChange === null || onChange === void 0 ? void 0 : onChange(date);\n      }\n    };\n    var triggerModeChange = function triggerModeChange(newMode) {\n      setMergedMode(newMode);\n      triggerPanelChange(mergedValue, newMode);\n    };\n    var onInternalSelect = function onInternalSelect(date, source) {\n      triggerChange(date);\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(date, {\n        source: source\n      });\n    };\n    // ====================== Locale ======================\n    var getDefaultLocale = function getDefaultLocale() {\n      var locale = props.locale;\n      var result = Object.assign(Object.assign({}, enUS), locale);\n      result.lang = Object.assign(Object.assign({}, result.lang), (locale || {}).lang);\n      return result;\n    };\n    // ====================== Render ======================\n    var dateRender = React.useCallback(function (date, info) {\n      if (fullCellRender) {\n        return fullCellRender(date, info);\n      }\n      if (dateFullCellRender) {\n        return dateFullCellRender(date);\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(\"\".concat(prefixCls, \"-cell-inner\"), \"\".concat(calendarPrefixCls, \"-date\"), _defineProperty({}, \"\".concat(calendarPrefixCls, \"-date-today\"), isSameDate(today, date)))\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(calendarPrefixCls, \"-date-value\")\n      }, String(generateConfig.getDate(date)).padStart(2, '0')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(calendarPrefixCls, \"-date-content\")\n      }, cellRender ? cellRender(date, info) : dateCellRender && dateCellRender(date)));\n    }, [dateFullCellRender, dateCellRender, cellRender, fullCellRender]);\n    var monthRender = React.useCallback(function (date, info) {\n      if (fullCellRender) {\n        return fullCellRender(date, info);\n      }\n      if (monthFullCellRender) {\n        return monthFullCellRender(date);\n      }\n      var months = info.locale.shortMonths || generateConfig.locale.getShortMonths(info.locale.locale);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(\"\".concat(prefixCls, \"-cell-inner\"), \"\".concat(calendarPrefixCls, \"-date\"), _defineProperty({}, \"\".concat(calendarPrefixCls, \"-date-today\"), isSameMonth(today, date)))\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(calendarPrefixCls, \"-date-value\")\n      }, months[generateConfig.getMonth(date)]), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(calendarPrefixCls, \"-date-content\")\n      }, cellRender ? cellRender(date, info) : monthCellRender && monthCellRender(date)));\n    }, [monthFullCellRender, monthCellRender, cellRender, fullCellRender]);\n    var _useLocale = useLocale('Calendar', getDefaultLocale),\n      _useLocale2 = _slicedToArray(_useLocale, 1),\n      contextLocale = _useLocale2[0];\n    var mergedCellRender = function mergedCellRender(current, info) {\n      if (info.type === 'date') {\n        return dateRender(current, info);\n      }\n      if (info.type === 'month') {\n        return monthRender(current, Object.assign(Object.assign({}, info), {\n          locale: contextLocale === null || contextLocale === void 0 ? void 0 : contextLocale.lang\n        }));\n      }\n    };\n    return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(calendarPrefixCls, (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(calendarPrefixCls, \"-full\"), fullscreen), _defineProperty(_classNames3, \"\".concat(calendarPrefixCls, \"-mini\"), !fullscreen), _defineProperty(_classNames3, \"\".concat(calendarPrefixCls, \"-rtl\"), direction === 'rtl'), _classNames3), calendar === null || calendar === void 0 ? void 0 : calendar.className, className, rootClassName, hashId),\n      style: Object.assign(Object.assign({}, calendar === null || calendar === void 0 ? void 0 : calendar.style), style)\n    }, headerRender ? headerRender({\n      value: mergedValue,\n      type: mergedMode,\n      onChange: function onChange(nextDate) {\n        onInternalSelect(nextDate, 'customize');\n      },\n      onTypeChange: triggerModeChange\n    }) : /*#__PURE__*/React.createElement(CalendarHeader, {\n      prefixCls: calendarPrefixCls,\n      value: mergedValue,\n      generateConfig: generateConfig,\n      mode: mergedMode,\n      fullscreen: fullscreen,\n      locale: contextLocale === null || contextLocale === void 0 ? void 0 : contextLocale.lang,\n      validRange: validRange,\n      onChange: onInternalSelect,\n      onModeChange: triggerModeChange\n    }), /*#__PURE__*/React.createElement(RCPickerPanel, {\n      value: mergedValue,\n      prefixCls: prefixCls,\n      locale: contextLocale === null || contextLocale === void 0 ? void 0 : contextLocale.lang,\n      generateConfig: generateConfig,\n      cellRender: mergedCellRender,\n      onSelect: function onSelect(nextDate) {\n        onInternalSelect(nextDate, panelMode);\n      },\n      mode: panelMode,\n      picker: panelMode,\n      disabledDate: mergedDisabledDate,\n      hideHeader: true\n    })));\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    Calendar.displayName = 'Calendar';\n  }\n  return Calendar;\n}\nexport default generateCalendar;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}