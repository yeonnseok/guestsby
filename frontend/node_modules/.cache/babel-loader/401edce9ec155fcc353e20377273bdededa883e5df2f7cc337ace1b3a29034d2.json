{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport * as React from 'react';\nimport { groupKeysMap } from '../../_util/transKeys';\nfunction useData(dataSource, rowKey, targetKeys) {\n  var mergedDataSource = React.useMemo(function () {\n    return (dataSource || []).map(function (record) {\n      if (rowKey) {\n        record = Object.assign(Object.assign({}, record), {\n          key: rowKey(record)\n        });\n      }\n      return record;\n    });\n  }, [dataSource, rowKey]);\n  var _React$useMemo = React.useMemo(function () {\n      var leftData = [];\n      var rightData = new Array((targetKeys || []).length);\n      var targetKeysMap = groupKeysMap(targetKeys || []);\n      mergedDataSource.forEach(function (record) {\n        // rightData should be ordered by targetKeys\n        // leftData should be ordered by dataSource\n        if (targetKeysMap.has(record.key)) {\n          rightData[targetKeysMap.get(record.key)] = record;\n        } else {\n          leftData.push(record);\n        }\n      });\n      return [leftData, rightData];\n    }, [mergedDataSource, targetKeys, rowKey]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n    leftDataSource = _React$useMemo2[0],\n    rightDataSource = _React$useMemo2[1];\n  return [mergedDataSource, leftDataSource, rightDataSource];\n}\nexport default useData;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}