{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar genLayoutLightStyle = function genLayoutLightStyle(token) {\n  var _$concat;\n  var componentCls = token.componentCls,\n    colorBgContainer = token.colorBgContainer,\n    colorBgBody = token.colorBgBody,\n    colorText = token.colorText;\n  return _defineProperty({}, \"\".concat(componentCls, \"-sider-light\"), (_$concat = {\n    background: colorBgContainer\n  }, _defineProperty(_$concat, \"\".concat(componentCls, \"-sider-trigger\"), {\n    color: colorText,\n    background: colorBgContainer\n  }), _defineProperty(_$concat, \"\".concat(componentCls, \"-sider-zero-width-trigger\"), {\n    color: colorText,\n    background: colorBgContainer,\n    border: \"1px solid \".concat(colorBgBody),\n    borderInlineStart: 0\n  }), _$concat));\n};\nvar _default = genLayoutLightStyle;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}