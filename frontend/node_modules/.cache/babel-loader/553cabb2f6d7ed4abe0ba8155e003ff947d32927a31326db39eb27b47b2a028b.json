{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport { genTreeStyle } from '../../tree/style';\n// =============================== Base ===============================\nvar genBaseStyle = function genBaseStyle(token) {\n  var componentCls = token.componentCls,\n    treePrefixCls = token.treePrefixCls,\n    colorBgElevated = token.colorBgElevated;\n  var treeCls = \".\".concat(treePrefixCls);\n  return [\n  // ======================================================\n  // ==                     Dropdown                     ==\n  // ======================================================\n  _defineProperty({}, \"\".concat(componentCls, \"-dropdown\"), [{\n    padding: \"\".concat(token.paddingXS, \"px \").concat(token.paddingXS / 2, \"px\")\n  },\n  // ====================== Tree ======================\n  genTreeStyle(treePrefixCls, mergeToken(token, {\n    colorBgContainer: colorBgElevated\n  })), _defineProperty({}, treeCls, _defineProperty({\n    borderRadius: 0\n  }, \"\".concat(treeCls, \"-list-holder-inner\"), _defineProperty({\n    alignItems: 'stretch'\n  }, \"\".concat(treeCls, \"-treenode\"), _defineProperty({}, \"\".concat(treeCls, \"-node-content-wrapper\"), {\n    flex: 'auto'\n  })))),\n  // ==================== Checkbox ====================\n  getCheckboxStyle(\"\".concat(treePrefixCls, \"-checkbox\"), token),\n  // ====================== RTL =======================\n  {\n    '&-rtl': _defineProperty({\n      direction: 'rtl'\n    }, \"\".concat(treeCls, \"-switcher\").concat(treeCls, \"-switcher_close\"), _defineProperty({}, \"\".concat(treeCls, \"-switcher-icon svg\"), {\n      transform: 'rotate(90deg)'\n    }))\n  }])];\n};\n// ============================== Export ==============================\nexport default function useTreeSelectStyle(prefixCls, treePrefixCls) {\n  return genComponentStyleHook('TreeSelect', function (token) {\n    var treeSelectToken = mergeToken(token, {\n      treePrefixCls: treePrefixCls\n    });\n    return [genBaseStyle(treeSelectToken)];\n  })(prefixCls);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}