{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Pagination from '../pagination';\nimport ListItem from './ListItem';\nexport var OmitProps = ['handleFilter', 'handleClear', 'checkedKeys'];\nvar parsePagination = function parsePagination(pagination) {\n  var defaultPagination = {\n    simple: true,\n    showSizeChanger: false,\n    showLessItems: false\n  };\n  return Object.assign(Object.assign({}, defaultPagination), pagination);\n};\nvar TransferListBody = function TransferListBody(props, ref) {\n  var prefixCls = props.prefixCls,\n    filteredRenderItems = props.filteredRenderItems,\n    selectedKeys = props.selectedKeys,\n    globalDisabled = props.disabled,\n    showRemove = props.showRemove,\n    pagination = props.pagination,\n    onScroll = props.onScroll,\n    onItemSelect = props.onItemSelect,\n    onItemRemove = props.onItemRemove;\n  var _React$useState = React.useState(1),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    current = _React$useState2[0],\n    setCurrent = _React$useState2[1];\n  var mergedPagination = React.useMemo(function () {\n    if (!pagination) {\n      return null;\n    }\n    var convertPagination = _typeof(pagination) === 'object' ? pagination : {};\n    return parsePagination(convertPagination);\n  }, [pagination]);\n  var _useMergedState = useMergedState(10, {\n      value: mergedPagination === null || mergedPagination === void 0 ? void 0 : mergedPagination.pageSize\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    pageSize = _useMergedState2[0],\n    setPageSize = _useMergedState2[1];\n  React.useEffect(function () {\n    if (mergedPagination) {\n      var maxPageCount = Math.ceil(filteredRenderItems.length / pageSize);\n      setCurrent(Math.min(current, maxPageCount));\n    }\n  }, [filteredRenderItems, mergedPagination, pageSize]);\n  var onClick = function onClick(item) {\n    onItemSelect === null || onItemSelect === void 0 ? void 0 : onItemSelect(item.key, !selectedKeys.includes(item.key));\n  };\n  var onRemove = function onRemove(item) {\n    onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove([item.key]);\n  };\n  var onPageChange = function onPageChange(cur) {\n    setCurrent(cur);\n  };\n  var onSizeChange = function onSizeChange(cur, size) {\n    setCurrent(cur);\n    setPageSize(size);\n  };\n  var memoizedItems = React.useMemo(function () {\n    var displayItems = mergedPagination ? filteredRenderItems.slice((current - 1) * pageSize, current * pageSize) : filteredRenderItems;\n    return displayItems;\n  }, [current, filteredRenderItems, mergedPagination, pageSize]);\n  React.useImperativeHandle(ref, function () {\n    return {\n      items: memoizedItems\n    };\n  });\n  var paginationNode = mergedPagination ? /*#__PURE__*/React.createElement(Pagination, {\n    size: \"small\",\n    disabled: globalDisabled,\n    simple: mergedPagination.simple,\n    pageSize: pageSize,\n    showLessItems: mergedPagination.showLessItems,\n    showSizeChanger: mergedPagination.showSizeChanger,\n    className: \"\".concat(prefixCls, \"-pagination\"),\n    total: filteredRenderItems.length,\n    current: current,\n    onChange: onPageChange,\n    onShowSizeChange: onSizeChange\n  }) : null;\n  var cls = classNames(\"\".concat(prefixCls, \"-content\"), _defineProperty({}, \"\".concat(prefixCls, \"-content-show-remove\"), showRemove));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"ul\", {\n    className: cls,\n    onScroll: onScroll\n  }, (memoizedItems || []).map(function (_ref) {\n    var renderedEl = _ref.renderedEl,\n      renderedText = _ref.renderedText,\n      item = _ref.item;\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: item.key,\n      item: item,\n      renderedText: renderedText,\n      renderedEl: renderedEl,\n      prefixCls: prefixCls,\n      showRemove: showRemove,\n      onClick: onClick,\n      onRemove: onRemove,\n      checked: selectedKeys.includes(item.key),\n      disabled: globalDisabled || item.disabled\n    });\n  })), paginationNode);\n};\nif (process.env.NODE_ENV !== 'production') {\n  TransferListBody.displayName = 'TransferListBody';\n}\nexport default /*#__PURE__*/React.forwardRef(TransferListBody);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}