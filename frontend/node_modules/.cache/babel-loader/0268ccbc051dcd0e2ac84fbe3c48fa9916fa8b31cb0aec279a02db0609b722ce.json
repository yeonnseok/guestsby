{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { Keyframes } from '@ant-design/cssinjs';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nvar skeletonClsLoading = new Keyframes(\"ant-skeleton-loading\", {\n  '0%': {\n    backgroundPosition: '100% 50%'\n  },\n  '100%': {\n    backgroundPosition: '0 50%'\n  }\n});\nvar genSkeletonElementCommonSize = function genSkeletonElementCommonSize(size) {\n  return {\n    height: size,\n    lineHeight: \"\".concat(size, \"px\")\n  };\n};\nvar genSkeletonElementAvatarSize = function genSkeletonElementAvatarSize(size) {\n  return Object.assign({\n    width: size\n  }, genSkeletonElementCommonSize(size));\n};\nvar genSkeletonColor = function genSkeletonColor(token) {\n  return {\n    background: token.skeletonLoadingBackground,\n    backgroundSize: '400% 100%',\n    animationName: skeletonClsLoading,\n    animationDuration: token.skeletonLoadingMotionDuration,\n    animationTimingFunction: 'ease',\n    animationIterationCount: 'infinite'\n  };\n};\nvar genSkeletonElementInputSize = function genSkeletonElementInputSize(size) {\n  return Object.assign({\n    width: size * 5,\n    minWidth: size * 5\n  }, genSkeletonElementCommonSize(size));\n};\nvar genSkeletonElementAvatar = function genSkeletonElementAvatar(token) {\n  var _ref;\n  var skeletonAvatarCls = token.skeletonAvatarCls,\n    gradientFromColor = token.gradientFromColor,\n    controlHeight = token.controlHeight,\n    controlHeightLG = token.controlHeightLG,\n    controlHeightSM = token.controlHeightSM;\n  return _ref = {}, _defineProperty(_ref, \"\".concat(skeletonAvatarCls), Object.assign({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    background: gradientFromColor\n  }, genSkeletonElementAvatarSize(controlHeight))), _defineProperty(_ref, \"\".concat(skeletonAvatarCls).concat(skeletonAvatarCls, \"-circle\"), {\n    borderRadius: '50%'\n  }), _defineProperty(_ref, \"\".concat(skeletonAvatarCls).concat(skeletonAvatarCls, \"-lg\"), Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG))), _defineProperty(_ref, \"\".concat(skeletonAvatarCls).concat(skeletonAvatarCls, \"-sm\"), Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))), _ref;\n};\nvar genSkeletonElementInput = function genSkeletonElementInput(token) {\n  var _ref2;\n  var controlHeight = token.controlHeight,\n    borderRadiusSM = token.borderRadiusSM,\n    skeletonInputCls = token.skeletonInputCls,\n    controlHeightLG = token.controlHeightLG,\n    controlHeightSM = token.controlHeightSM,\n    gradientFromColor = token.gradientFromColor;\n  return _ref2 = {}, _defineProperty(_ref2, \"\".concat(skeletonInputCls), Object.assign({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    background: gradientFromColor,\n    borderRadius: borderRadiusSM\n  }, genSkeletonElementInputSize(controlHeight))), _defineProperty(_ref2, \"\".concat(skeletonInputCls, \"-lg\"), Object.assign({}, genSkeletonElementInputSize(controlHeightLG))), _defineProperty(_ref2, \"\".concat(skeletonInputCls, \"-sm\"), Object.assign({}, genSkeletonElementInputSize(controlHeightSM))), _ref2;\n};\nvar genSkeletonElementImageSize = function genSkeletonElementImageSize(size) {\n  return Object.assign({\n    width: size\n  }, genSkeletonElementCommonSize(size));\n};\nvar genSkeletonElementImage = function genSkeletonElementImage(token) {\n  var _Object$assign, _ref3;\n  var skeletonImageCls = token.skeletonImageCls,\n    imageSizeBase = token.imageSizeBase,\n    gradientFromColor = token.gradientFromColor,\n    borderRadiusSM = token.borderRadiusSM;\n  return _ref3 = {}, _defineProperty(_ref3, \"\".concat(skeletonImageCls), Object.assign(Object.assign({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    verticalAlign: 'top',\n    background: gradientFromColor,\n    borderRadius: borderRadiusSM\n  }, genSkeletonElementImageSize(imageSizeBase * 2)), (_Object$assign = {}, _defineProperty(_Object$assign, \"\".concat(skeletonImageCls, \"-path\"), {\n    fill: '#bfbfbf'\n  }), _defineProperty(_Object$assign, \"\".concat(skeletonImageCls, \"-svg\"), Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {\n    maxWidth: imageSizeBase * 4,\n    maxHeight: imageSizeBase * 4\n  })), _defineProperty(_Object$assign, \"\".concat(skeletonImageCls, \"-svg\").concat(skeletonImageCls, \"-svg-circle\"), {\n    borderRadius: '50%'\n  }), _Object$assign))), _defineProperty(_ref3, \"\".concat(skeletonImageCls).concat(skeletonImageCls, \"-circle\"), {\n    borderRadius: '50%'\n  }), _ref3;\n};\nvar genSkeletonElementButtonShape = function genSkeletonElementButtonShape(token, size, buttonCls) {\n  var _ref4;\n  var skeletonButtonCls = token.skeletonButtonCls;\n  return _ref4 = {}, _defineProperty(_ref4, \"\".concat(buttonCls).concat(skeletonButtonCls, \"-circle\"), {\n    width: size,\n    minWidth: size,\n    borderRadius: '50%'\n  }), _defineProperty(_ref4, \"\".concat(buttonCls).concat(skeletonButtonCls, \"-round\"), {\n    borderRadius: size\n  }), _ref4;\n};\nvar genSkeletonElementButtonSize = function genSkeletonElementButtonSize(size) {\n  return Object.assign({\n    width: size * 2,\n    minWidth: size * 2\n  }, genSkeletonElementCommonSize(size));\n};\nvar genSkeletonElementButton = function genSkeletonElementButton(token) {\n  var borderRadiusSM = token.borderRadiusSM,\n    skeletonButtonCls = token.skeletonButtonCls,\n    controlHeight = token.controlHeight,\n    controlHeightLG = token.controlHeightLG,\n    controlHeightSM = token.controlHeightSM,\n    gradientFromColor = token.gradientFromColor;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(_defineProperty({}, \"\".concat(skeletonButtonCls), Object.assign({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    background: gradientFromColor,\n    borderRadius: borderRadiusSM,\n    width: controlHeight * 2,\n    minWidth: controlHeight * 2\n  }, genSkeletonElementButtonSize(controlHeight))), genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), _defineProperty({}, \"\".concat(skeletonButtonCls, \"-lg\"), Object.assign({}, genSkeletonElementButtonSize(controlHeightLG)))), genSkeletonElementButtonShape(token, controlHeightLG, \"\".concat(skeletonButtonCls, \"-lg\"))), _defineProperty({}, \"\".concat(skeletonButtonCls, \"-sm\"), Object.assign({}, genSkeletonElementButtonSize(controlHeightSM)))), genSkeletonElementButtonShape(token, controlHeightSM, \"\".concat(skeletonButtonCls, \"-sm\")));\n};\n// =============================== Base ===============================\nvar genBaseStyle = function genBaseStyle(token) {\n  var _$concat, _$concat3, _$concat4, _$concat$concat2, _ref5;\n  var componentCls = token.componentCls,\n    skeletonAvatarCls = token.skeletonAvatarCls,\n    skeletonTitleCls = token.skeletonTitleCls,\n    skeletonParagraphCls = token.skeletonParagraphCls,\n    skeletonButtonCls = token.skeletonButtonCls,\n    skeletonInputCls = token.skeletonInputCls,\n    skeletonImageCls = token.skeletonImageCls,\n    controlHeight = token.controlHeight,\n    controlHeightLG = token.controlHeightLG,\n    controlHeightSM = token.controlHeightSM,\n    gradientFromColor = token.gradientFromColor,\n    padding = token.padding,\n    marginSM = token.marginSM,\n    borderRadius = token.borderRadius,\n    titleHeight = token.titleHeight,\n    blockRadius = token.blockRadius,\n    paragraphLiHeight = token.paragraphLiHeight,\n    controlHeightXS = token.controlHeightXS,\n    paragraphMarginTop = token.paragraphMarginTop;\n  return _ref5 = {}, _defineProperty(_ref5, \"\".concat(componentCls), (_$concat4 = {\n    display: 'table',\n    width: '100%'\n  }, _defineProperty(_$concat4, \"\".concat(componentCls, \"-header\"), (_$concat = {\n    display: 'table-cell',\n    paddingInlineEnd: padding,\n    verticalAlign: 'top'\n  }, _defineProperty(_$concat, \"\".concat(skeletonAvatarCls), Object.assign({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    background: gradientFromColor\n  }, genSkeletonElementAvatarSize(controlHeight))), _defineProperty(_$concat, \"\".concat(skeletonAvatarCls, \"-circle\"), {\n    borderRadius: '50%'\n  }), _defineProperty(_$concat, \"\".concat(skeletonAvatarCls, \"-lg\"), Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG))), _defineProperty(_$concat, \"\".concat(skeletonAvatarCls, \"-sm\"), Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))), _$concat)), _defineProperty(_$concat4, \"\".concat(componentCls, \"-content\"), (_$concat3 = {\n    display: 'table-cell',\n    width: '100%',\n    verticalAlign: 'top'\n  }, _defineProperty(_$concat3, \"\".concat(skeletonTitleCls), _defineProperty({\n    width: '100%',\n    height: titleHeight,\n    background: gradientFromColor,\n    borderRadius: blockRadius\n  }, \"+ \".concat(skeletonParagraphCls), {\n    marginBlockStart: controlHeightSM\n  })), _defineProperty(_$concat3, \"\".concat(skeletonParagraphCls), {\n    padding: 0,\n    '> li': {\n      width: '100%',\n      height: paragraphLiHeight,\n      listStyle: 'none',\n      background: gradientFromColor,\n      borderRadius: blockRadius,\n      '+ li': {\n        marginBlockStart: controlHeightXS\n      }\n    }\n  }), _defineProperty(_$concat3, \"\".concat(skeletonParagraphCls, \"> li:last-child:not(:first-child):not(:nth-child(2))\"), {\n    width: '61%'\n  }), _$concat3)), _defineProperty(_$concat4, \"&-round \".concat(componentCls, \"-content\"), _defineProperty({}, \"\".concat(skeletonTitleCls, \", \").concat(skeletonParagraphCls, \" > li\"), {\n    borderRadius: borderRadius\n  })), _$concat4)), _defineProperty(_ref5, \"\".concat(componentCls, \"-with-avatar \").concat(componentCls, \"-content\"), _defineProperty({}, \"\".concat(skeletonTitleCls), _defineProperty({\n    marginBlockStart: marginSM\n  }, \"+ \".concat(skeletonParagraphCls), {\n    marginBlockStart: paragraphMarginTop\n  }))), _defineProperty(_ref5, \"\".concat(componentCls).concat(componentCls, \"-element\"), Object.assign(Object.assign(Object.assign(Object.assign({\n    display: 'inline-block',\n    width: 'auto'\n  }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token))), _defineProperty(_ref5, \"\".concat(componentCls).concat(componentCls, \"-block\"), (_$concat$concat2 = {\n    width: '100%'\n  }, _defineProperty(_$concat$concat2, \"\".concat(skeletonButtonCls), {\n    width: '100%'\n  }), _defineProperty(_$concat$concat2, \"\".concat(skeletonInputCls), {\n    width: '100%'\n  }), _$concat$concat2)), _defineProperty(_ref5, \"\".concat(componentCls).concat(componentCls, \"-active\"), _defineProperty({}, \"\\n        \".concat(skeletonTitleCls, \",\\n        \").concat(skeletonParagraphCls, \" > li,\\n        \").concat(skeletonAvatarCls, \",\\n        \").concat(skeletonButtonCls, \",\\n        \").concat(skeletonInputCls, \",\\n        \").concat(skeletonImageCls, \"\\n      \"), Object.assign({}, genSkeletonColor(token)))), _ref5;\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Skeleton', function (token) {\n  var componentCls = token.componentCls;\n  var skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: \"\".concat(componentCls, \"-avatar\"),\n    skeletonTitleCls: \"\".concat(componentCls, \"-title\"),\n    skeletonParagraphCls: \"\".concat(componentCls, \"-paragraph\"),\n    skeletonButtonCls: \"\".concat(componentCls, \"-button\"),\n    skeletonInputCls: \"\".concat(componentCls, \"-input\"),\n    skeletonImageCls: \"\".concat(componentCls, \"-image\"),\n    imageSizeBase: token.controlHeight * 1.5,\n    borderRadius: 100,\n    skeletonLoadingBackground: \"linear-gradient(90deg, \".concat(token.gradientFromColor, \" 25%, \").concat(token.gradientToColor, \" 37%, \").concat(token.gradientFromColor, \" 63%)\"),\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, function (token) {\n  var colorFillContent = token.colorFillContent,\n    colorFill = token.colorFill;\n  var gradientFromColor = colorFillContent;\n  var gradientToColor = colorFill;\n  return {\n    color: gradientFromColor,\n    colorGradientEnd: gradientToColor,\n    gradientFromColor: gradientFromColor,\n    gradientToColor: gradientToColor,\n    titleHeight: token.controlHeight / 2,\n    blockRadius: token.borderRadiusSM,\n    paragraphMarginTop: token.marginLG + token.marginXXS,\n    paragraphLiHeight: token.controlHeight / 2\n  };\n}, {\n  deprecatedTokens: [['color', 'gradientFromColor'], ['colorGradientEnd', 'gradientToColor']]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}