{"ast":null,"code":"import { scheduleMicrotask } from './utils'; // TYPES\n\n// CLASS\nexport var NotifyManager = /*#__PURE__*/function () {\n  function NotifyManager() {\n    this.queue = [];\n    this.transactions = 0;\n    this.notifyFn = function (callback) {\n      callback();\n    };\n    this.batchNotifyFn = function (callback) {\n      callback();\n    };\n  }\n  var _proto = NotifyManager.prototype;\n  _proto.batch = function batch(callback) {\n    var result;\n    this.transactions++;\n    try {\n      result = callback();\n    } finally {\n      this.transactions--;\n      if (!this.transactions) {\n        this.flush();\n      }\n    }\n    return result;\n  };\n  _proto.schedule = function schedule(callback) {\n    var _this = this;\n    if (this.transactions) {\n      this.queue.push(callback);\n    } else {\n      scheduleMicrotask(function () {\n        _this.notifyFn(callback);\n      });\n    }\n  }\n  /**\n   * All calls to the wrapped function will be batched.\n   */;\n\n  _proto.batchCalls = function batchCalls(callback) {\n    var _this2 = this;\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this2.schedule(function () {\n        callback.apply(void 0, args);\n      });\n    };\n  };\n  _proto.flush = function flush() {\n    var _this3 = this;\n    var queue = this.queue;\n    this.queue = [];\n    if (queue.length) {\n      scheduleMicrotask(function () {\n        _this3.batchNotifyFn(function () {\n          queue.forEach(function (callback) {\n            _this3.notifyFn(callback);\n          });\n        });\n      });\n    }\n  }\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */;\n\n  _proto.setNotifyFunction = function setNotifyFunction(fn) {\n    this.notifyFn = fn;\n  }\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */;\n\n  _proto.setBatchNotifyFunction = function setBatchNotifyFunction(fn) {\n    this.batchNotifyFn = fn;\n  };\n  return NotifyManager;\n}(); // SINGLETON\n\nexport var notifyManager = new NotifyManager();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}