{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { textEllipsis } from '../../style';\nvar genEllipsisStyle = function genEllipsisStyle(token) {\n  var _Object$assign;\n  var componentCls = token.componentCls;\n  return _defineProperty({}, \"\".concat(componentCls, \"-wrapper\"), _defineProperty({}, \"\".concat(componentCls, \"-cell-ellipsis\"), Object.assign(Object.assign({}, textEllipsis), (_Object$assign = {\n    wordBreak: 'keep-all'\n  }, _defineProperty(_Object$assign, \"\\n          &\".concat(componentCls, \"-cell-fix-left-last,\\n          &\").concat(componentCls, \"-cell-fix-right-first\\n        \"), _defineProperty({\n    overflow: 'visible'\n  }, \"\".concat(componentCls, \"-cell-content\"), {\n    display: 'block',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis'\n  })), _defineProperty(_Object$assign, \"\".concat(componentCls, \"-column-title\"), {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    wordBreak: 'keep-all'\n  }), _Object$assign))));\n};\nexport default genEllipsisStyle;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}