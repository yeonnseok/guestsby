{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { Keyframes } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nvar genAntProgressActive = function genAntProgressActive(isRtl) {\n  var direction = isRtl ? '100%' : '-100%';\n  return new Keyframes(\"antProgress\".concat(isRtl ? 'RTL' : 'LTR', \"Active\"), {\n    '0%': {\n      transform: \"translateX(\".concat(direction, \") scaleX(0)\"),\n      opacity: 0.1\n    },\n    '20%': {\n      transform: \"translateX(\".concat(direction, \") scaleX(0)\"),\n      opacity: 0.5\n    },\n    to: {\n      transform: 'translateX(0) scaleX(1)',\n      opacity: 0\n    }\n  });\n};\nvar genBaseStyle = function genBaseStyle(token) {\n  var _$concat4, _$concat5, _Object$assign;\n  var progressCls = token.componentCls,\n    iconPrefixCls = token.iconCls;\n  return _defineProperty({}, progressCls, Object.assign(Object.assign({}, resetComponent(token)), (_Object$assign = {\n    display: 'inline-block',\n    '&-rtl': {\n      direction: 'rtl'\n    },\n    '&-line': {\n      position: 'relative',\n      width: '100%',\n      fontSize: token.fontSize,\n      marginInlineEnd: token.marginXS,\n      marginBottom: token.marginXS\n    }\n  }, _defineProperty(_Object$assign, \"\".concat(progressCls, \"-outer\"), {\n    display: 'inline-block',\n    width: '100%'\n  }), _defineProperty(_Object$assign, \"&\".concat(progressCls, \"-show-info\"), _defineProperty({}, \"\".concat(progressCls, \"-outer\"), {\n    marginInlineEnd: \"calc(-2em - \".concat(token.marginXS, \"px)\"),\n    paddingInlineEnd: \"calc(2em + \".concat(token.paddingXS, \"px)\")\n  })), _defineProperty(_Object$assign, \"\".concat(progressCls, \"-inner\"), {\n    position: 'relative',\n    display: 'inline-block',\n    width: '100%',\n    overflow: 'hidden',\n    verticalAlign: 'middle',\n    backgroundColor: token.progressRemainingColor,\n    borderRadius: token.progressLineRadius\n  }), _defineProperty(_Object$assign, \"\".concat(progressCls, \"-inner:not(\").concat(progressCls, \"-circle-gradient)\"), _defineProperty({}, \"\".concat(progressCls, \"-circle-path\"), {\n    stroke: token.colorInfo\n  })), _defineProperty(_Object$assign, \"\".concat(progressCls, \"-success-bg, \").concat(progressCls, \"-bg\"), {\n    position: 'relative',\n    backgroundColor: token.colorInfo,\n    borderRadius: token.progressLineRadius,\n    transition: \"all \".concat(token.motionDurationSlow, \" \").concat(token.motionEaseInOutCirc)\n  }), _defineProperty(_Object$assign, \"\".concat(progressCls, \"-success-bg\"), {\n    position: 'absolute',\n    insetBlockStart: 0,\n    insetInlineStart: 0,\n    backgroundColor: token.colorSuccess\n  }), _defineProperty(_Object$assign, \"\".concat(progressCls, \"-text\"), _defineProperty({\n    display: 'inline-block',\n    width: '2em',\n    marginInlineStart: token.marginXS,\n    color: token.progressInfoTextColor,\n    lineHeight: 1,\n    whiteSpace: 'nowrap',\n    textAlign: 'start',\n    verticalAlign: 'middle',\n    wordBreak: 'normal'\n  }, iconPrefixCls, {\n    fontSize: token.fontSize\n  })), _defineProperty(_Object$assign, \"&\".concat(progressCls, \"-status-active\"), _defineProperty({}, \"\".concat(progressCls, \"-bg::before\"), {\n    position: 'absolute',\n    inset: 0,\n    backgroundColor: token.colorBgContainer,\n    borderRadius: token.progressLineRadius,\n    opacity: 0,\n    animationName: genAntProgressActive(),\n    animationDuration: token.progressActiveMotionDuration,\n    animationTimingFunction: token.motionEaseOutQuint,\n    animationIterationCount: 'infinite',\n    content: '\"\"'\n  })), _defineProperty(_Object$assign, \"&\".concat(progressCls, \"-rtl\").concat(progressCls, \"-status-active\"), _defineProperty({}, \"\".concat(progressCls, \"-bg::before\"), {\n    animationName: genAntProgressActive(true)\n  })), _defineProperty(_Object$assign, \"&\".concat(progressCls, \"-status-exception\"), (_$concat4 = {}, _defineProperty(_$concat4, \"\".concat(progressCls, \"-bg\"), {\n    backgroundColor: token.colorError\n  }), _defineProperty(_$concat4, \"\".concat(progressCls, \"-text\"), {\n    color: token.colorError\n  }), _$concat4)), _defineProperty(_Object$assign, \"&\".concat(progressCls, \"-status-exception \").concat(progressCls, \"-inner:not(\").concat(progressCls, \"-circle-gradient)\"), _defineProperty({}, \"\".concat(progressCls, \"-circle-path\"), {\n    stroke: token.colorError\n  })), _defineProperty(_Object$assign, \"&\".concat(progressCls, \"-status-success\"), (_$concat5 = {}, _defineProperty(_$concat5, \"\".concat(progressCls, \"-bg\"), {\n    backgroundColor: token.colorSuccess\n  }), _defineProperty(_$concat5, \"\".concat(progressCls, \"-text\"), {\n    color: token.colorSuccess\n  }), _$concat5)), _defineProperty(_Object$assign, \"&\".concat(progressCls, \"-status-success \").concat(progressCls, \"-inner:not(\").concat(progressCls, \"-circle-gradient)\"), _defineProperty({}, \"\".concat(progressCls, \"-circle-path\"), {\n    stroke: token.colorSuccess\n  })), _Object$assign)));\n};\nvar genCircleStyle = function genCircleStyle(token) {\n  var _progressCls, _ref2;\n  var progressCls = token.componentCls,\n    iconPrefixCls = token.iconCls;\n  return _ref2 = {}, _defineProperty(_ref2, progressCls, (_progressCls = {}, _defineProperty(_progressCls, \"\".concat(progressCls, \"-circle-trail\"), {\n    stroke: token.progressRemainingColor\n  }), _defineProperty(_progressCls, \"&\".concat(progressCls, \"-circle \").concat(progressCls, \"-inner\"), {\n    position: 'relative',\n    lineHeight: 1,\n    backgroundColor: 'transparent'\n  }), _defineProperty(_progressCls, \"&\".concat(progressCls, \"-circle \").concat(progressCls, \"-text\"), _defineProperty({\n    position: 'absolute',\n    insetBlockStart: '50%',\n    insetInlineStart: 0,\n    width: '100%',\n    margin: 0,\n    padding: 0,\n    color: token.colorText,\n    lineHeight: 1,\n    whiteSpace: 'normal',\n    textAlign: 'center',\n    transform: 'translateY(-50%)'\n  }, iconPrefixCls, {\n    fontSize: \"\".concat(token.fontSize / token.fontSizeSM, \"em\")\n  })), _defineProperty(_progressCls, \"\".concat(progressCls, \"-circle&-status-exception\"), _defineProperty({}, \"\".concat(progressCls, \"-text\"), {\n    color: token.colorError\n  })), _defineProperty(_progressCls, \"\".concat(progressCls, \"-circle&-status-success\"), _defineProperty({}, \"\".concat(progressCls, \"-text\"), {\n    color: token.colorSuccess\n  })), _progressCls)), _defineProperty(_ref2, \"\".concat(progressCls, \"-inline-circle\"), _defineProperty({\n    lineHeight: 1\n  }, \"\".concat(progressCls, \"-inner\"), {\n    verticalAlign: 'bottom'\n  })), _ref2;\n};\nvar genStepStyle = function genStepStyle(token) {\n  var progressCls = token.componentCls;\n  return _defineProperty({}, progressCls, _defineProperty({}, \"\".concat(progressCls, \"-steps\"), {\n    display: 'inline-block',\n    '&-outer': {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    '&-item': {\n      flexShrink: 0,\n      minWidth: token.progressStepMinWidth,\n      marginInlineEnd: token.progressStepMarginInlineEnd,\n      backgroundColor: token.progressRemainingColor,\n      transition: \"all \".concat(token.motionDurationSlow),\n      '&-active': {\n        backgroundColor: token.colorInfo\n      }\n    }\n  }));\n};\nvar genSmallLine = function genSmallLine(token) {\n  var progressCls = token.componentCls,\n    iconPrefixCls = token.iconCls;\n  return _defineProperty({}, progressCls, _defineProperty({}, \"\".concat(progressCls, \"-small&-line, \").concat(progressCls, \"-small&-line \").concat(progressCls, \"-text \").concat(iconPrefixCls), {\n    fontSize: token.fontSizeSM\n  }));\n};\nexport default genComponentStyleHook('Progress', function (token) {\n  var progressStepMarginInlineEnd = token.marginXXS / 2;\n  var progressToken = mergeToken(token, {\n    progressLineRadius: 100,\n    progressInfoTextColor: token.colorText,\n    progressDefaultColor: token.colorInfo,\n    progressRemainingColor: token.colorFillSecondary,\n    progressStepMarginInlineEnd: progressStepMarginInlineEnd,\n    progressStepMinWidth: progressStepMarginInlineEnd,\n    progressActiveMotionDuration: '2.4s'\n  });\n  return [genBaseStyle(progressToken), genCircleStyle(progressToken), genStepStyle(progressToken), genSmallLine(progressToken)];\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}