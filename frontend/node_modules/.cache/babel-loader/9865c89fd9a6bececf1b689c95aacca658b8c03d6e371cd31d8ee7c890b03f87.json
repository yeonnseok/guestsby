{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nvar genStyle = function genStyle(token) {\n  var _$concat;\n  var componentCls = token.componentCls;\n  return _defineProperty({}, \"\".concat(componentCls, \"-wrapper-rtl\"), (_$concat = {\n    direction: 'rtl',\n    table: {\n      direction: 'rtl'\n    }\n  }, _defineProperty(_$concat, \"\".concat(componentCls, \"-pagination-left\"), {\n    justifyContent: 'flex-end'\n  }), _defineProperty(_$concat, \"\".concat(componentCls, \"-pagination-right\"), {\n    justifyContent: 'flex-start'\n  }), _defineProperty(_$concat, \"\".concat(componentCls, \"-row-expand-icon\"), {\n    '&::after': {\n      transform: 'rotate(-90deg)'\n    },\n    '&-collapsed::before': {\n      transform: 'rotate(180deg)'\n    },\n    '&-collapsed::after': {\n      transform: 'rotate(0deg)'\n    }\n  }), _defineProperty(_$concat, \"\".concat(componentCls, \"-container\"), {\n    '&::before': {\n      insetInlineStart: 'unset',\n      insetInlineEnd: 0\n    },\n    '&::after': {\n      insetInlineStart: 0,\n      insetInlineEnd: 'unset'\n    }\n  }), _$concat));\n};\nexport default genStyle;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}