// Seems this is used for iconFont
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _classnames = /*#__PURE__*/ _interop_require_default(require("classnames"));
const _ref = require("rc-util/lib/ref");
const _Context = /*#__PURE__*/ _interop_require_default(require("./Context"));
const _utils = require("../utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Icon = /*#__PURE__*/ _react.forwardRef((props, ref)=>{
    const { // affect outter <i>...</i>
    className, // affect inner <svg>...</svg>
    component: Component, viewBox, spin, rotate, tabIndex, onClick, // children
    children, ...restProps } = props;
    const iconRef = _react.useRef();
    const mergedRef = (0, _ref.useComposeRef)(iconRef, ref);
    (0, _utils.warning)(Boolean(Component || children), "Should have `component` prop or `children`.");
    (0, _utils.useInsertStyles)(iconRef);
    const { prefixCls = "anticon", rootClassName } = _react.useContext(_Context.default);
    const classString = (0, _classnames.default)(rootClassName, prefixCls, className);
    const svgClassString = (0, _classnames.default)({
        [`${prefixCls}-spin`]: !!spin
    });
    const svgStyle = rotate ? {
        msTransform: `rotate(${rotate}deg)`,
        transform: `rotate(${rotate}deg)`
    } : undefined;
    const innerSvgProps = {
        ..._utils.svgBaseProps,
        className: svgClassString,
        style: svgStyle,
        viewBox
    };
    if (!viewBox) {
        delete innerSvgProps.viewBox;
    }
    // component > children
    const renderInnerNode = ()=>{
        if (Component) {
            return /*#__PURE__*/ _react.createElement(Component, innerSvgProps, children);
        }
        if (children) {
            (0, _utils.warning)(Boolean(viewBox) || _react.Children.count(children) === 1 && /*#__PURE__*/ _react.isValidElement(children) && _react.Children.only(children).type === "use", "Make sure that you provide correct `viewBox`" + " prop (default `0 0 1024 1024`) to the icon.");
            return /*#__PURE__*/ _react.createElement("svg", {
                ...innerSvgProps,
                viewBox: viewBox
            }, children);
        }
        return null;
    };
    let iconTabIndex = tabIndex;
    if (iconTabIndex === undefined && onClick) {
        iconTabIndex = -1;
    }
    return /*#__PURE__*/ _react.createElement("span", {
        role: "img",
        ...restProps,
        ref: mergedRef,
        tabIndex: iconTabIndex,
        onClick: onClick,
        className: classString
    }, renderInnerNode());
});
Icon.displayName = "AntdIcon";
const _default = Icon;
